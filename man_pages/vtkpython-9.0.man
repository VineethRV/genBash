PYTHON(1)                        User Commands                       PYTHON(1)

NAME
       Python - manual page for vtkPython 3.9.0+ : VTK-Wrapper for Python

DESCRIPTION
       usage:  /usr/bin/../lib/x86_64-linux-gnu/vtkpython [option] ... [-c cmd
       | -m mod | file | -] [arg] ...  Options and arguments (and  correspond‐
       ing environment variables): -b     : issue warnings about str(bytes_in‐
       stance), str(bytearray_instance)

              and comparing bytes/bytearray with str. (-bb: issue errors)

       -B     : don't write .pyc files on  import;  also  PYTHONDONTWRITEBYTE‐
       CODE=x -c cmd : program passed in as string (terminates option list) -d
       : debug output from parser; also PYTHONDEBUG=x -E     : ignore  PYTHON*
       environment  variables  (such  as  PYTHONPATH) -h     : print this help
       message and exit (also --help) -i      :  inspect  interactively  after
       running script; forces a prompt even

              if stdin does not appear to be a terminal; also PYTHONINSPECT=x

       -I     : isolate Python from the user's environment (implies -E and -s)
       -m mod : run library module as a script  (terminates  option  list)  -O
       : remove assert and __debug__-dependent statements; add .opt-1 before

              .pyc extension; also PYTHONOPTIMIZE=x

       -OO    : do -O changes and also discard docstrings; add .opt-2 before

              .pyc extension

       -q      :  don't  print  version  and copyright messages on interactive
       startup -s     : don't  add  user  site  directory  to  sys.path;  also
       PYTHONNOUSERSITE  -S      : don't imply 'import site' on initialization
       -u     : force the stdout and stderr streams to be unbuffered;

              this option has no effect on stdin; also PYTHONUNBUFFERED=x

       -v     : verbose (trace import statements); also PYTHONVERBOSE=x

              can be supplied multiple times to increase verbosity

       -V     : print the Python version number and exit (also --version)

              when given twice, print more information about the build

       -W arg : warning control; arg is action:message:category:module:lineno

              also PYTHONWARNINGS=arg

       -x     : skip first line of source, allowing use of non-Unix  forms  of
       #!cmd  -X  opt  : set implementation-specific option. The following op‐
       tions are available:

       -X faulthandler: enable faulthandler

       -X oldparser: enable the traditional LL(1) parser; also PYTHONOLDPARSER

       -X showrefcount: output the total reference count and number of used

              memory blocks when the program finishes or after each  statement
              in the interactive interpreter. This only works on debug builds

       -X tracemalloc: start tracing Python memory allocations using the

              tracemalloc  module.  By  default, only the most recent frame is
              stored in a traceback of a trace. Use -X  tracemalloc=NFRAME  to
              start tracing with a traceback limit of NFRAME frames

       -X importtime: show how long each import takes. It shows module name,

              cumulative  time  (including  nested imports) and self time (ex‐
              cluding nested imports). Note that its output may be  broken  in
              multi-threaded  application. Typical usage is python3 -X import‐
              time -c 'import asyncio'

       -X dev: enable CPython's  "development  mode",  introducing  additional
              runtime

              checks  which are too expensive to be enabled by default. Effect
              of the developer mode:

              * Add default warning filter, as  -W  default  *  Install  debug
              hooks  on  memory  allocators: see the PyMem_SetupDebugHooks() C
              function * Enable the faulthandler module  to  dump  the  Python
              traceback  on  a  crash  *  Enable  asyncio debug mode * Set the
              dev_mode attribute of sys.flags to True *  io.IOBase  destructor
              logs close() exceptions

       -X  utf8: enable UTF-8 mode for operating system interfaces, overriding
              the default

              locale-aware mode. -X  utf8=0  explicitly  disables  UTF-8  mode
              (even when it would otherwise activate automatically)

       -X  pycache_prefix=PATH:  enable  writing .pyc files to a parallel tree
              rooted at the

              given directory instead of to the code tree

   --check-hash-based-pycs always|default|never:
              control how Python invalidates hash-based .pyc files

       file   : program read from script file -      : program read from stdin
       (default;  interactive mode if a tty) arg ...: arguments passed to pro‐
       gram in sys.argv[1:]

       Other environment variables: PYTHONSTARTUP: file executed  on  interac‐
       tive startup (no default) PYTHONPATH   : ':'-separated list of directo‐
       ries prefixed to the

       default module search path.
              The result is sys.path.

       PYTHONHOME   : alternate  <prefix>  directory  (or  <prefix>:<exec_pre‐
       fix>).

              The default module search path uses <prefix>/lib/pythonX.X.

       PYTHONPLATLIBDIR : override sys.platlibdir.  PYTHONCASEOK : ignore case
       in 'import' statements (Windows).  PYTHONUTF8: if set to 1, enable  the
       UTF-8  mode.   PYTHONIOENCODING:  Encoding[:errors] used for stdin/std‐
       out/stderr.  PYTHONFAULTHANDLER: dump the Python traceback on fatal er‐
       rors.   PYTHONHASHSEED:  if  this variable is set to 'random', a random
       value is used

       to seed the hashes of str and bytes objects.
              It can also be set to an

              integer in the range [0,4294967295] to get hash  values  with  a
              predictable seed.

       PYTHONMALLOC:  set  the  Python  memory allocators and/or install debug
       hooks

              on Python memory allocators. Use PYTHONMALLOC=debug  to  install
              debug hooks.

       PYTHONCOERCECLOCALE:  if this variable is set to 0, it disables the lo‐
       cale

              coercion behavior. Use PYTHONCOERCECLOCALE=warn to request  dis‐
              play  of  locale  coercion  and locale compatibility warnings on
              stderr.

       PYTHONBREAKPOINT: if this variable is set to 0, it disables the default

              debugger. It can be set to the  callable  of  your  debugger  of
              choice.

       PYTHONDEVMODE:  enable the development mode.  PYTHONPYCACHEPREFIX: root
       directory for bytecode cache (pyc) files.

SEE ALSO
       The full documentation for Python is maintained as  a  Texinfo  manual.
       If  the  info  and Python programs are properly installed at your site,
       the command

              info Python

       should give you access to the complete manual.

Python 3.9.0+                    November 2020                       PYTHON(1)
