CLANG-CHECK(1)                   User Commands                  CLANG-CHECK(1)

NAME
       clang-check - manual page for clang-check 14

DESCRIPTION
       USAGE: clang-check [options] <source0> [... <sourceN>]

       OPTIONS:

       Generic Options:

       --help                             -    Display    available    options
              (--help-hidden for more)

       --help-list                     - Display  list  of  available  options
              (--help-list-hidden for more)

       --version                       - Display the version of this program

       clang-check options:

       --analyze                       - Run static analysis engine

       --analyzer-output-path=<string> - Write output to <file>

       --ast-dump                      - Build ASTs and then debug dump them

       --ast-dump-filter=<string>       -  Use with -ast-dump or -ast-print to
              dump/print only AST declaration nodes having a certain substring
              in a qualified name. Use -ast-list to list all filterable decla‐
              ration node names.

       --ast-list                      - Build ASTs and print the list of dec‐
              laration node qualified names

       --ast-print                     - Build ASTs and then pretty-print them

       --extra-arg=<string>             - Additional argument to append to the
              compiler command line

       --extra-arg-before=<string>     - Additional argument to prepend to the
              compiler command line

       --fix-what-you-can              - Apply fix-it advice even in the pres‐
              ence of unfixable errors

       --fixit                         - Apply  fix-it  advice  to  the  input
              source

       -p=<string>                     - Build path

       --syntax-tree-dump              - dump the syntax tree

       --tokens-dump                   - dump the preprocessed tokens

       -p <build-path> is used to read a compile command database.

              For  example,  it can be a CMake build directory in which a file
              named  compile_commands.json  exists  (use   -DCMAKE_EXPORT_COM‐
              PILE_COMMANDS=ON CMake option to get this output). When no build
              path is specified, a search for  compile_commands.json  will  be
              attempted  through  all  parent  paths of the first input file .
              See:   https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html
              for an example of setting up Clang Tooling on a source tree.

       <source0> ... specify the paths of source files. These paths are

              looked up in the compile command database. If the path of a file
              is absolute, it needs to point into CMake's source tree. If  the
              path  is  relative, the current working directory needs to be in
              the CMake source tree and the file must be in a subdirectory  of
              the  current  working  directory.  "./" prefixes in the relative
              files will be automatically removed, but the rest of a  relative
              path must be a suffix of a path in the compile command database.

              For example, to run clang-check on all files in a subtree of the
              source tree, use:

              find path/in/subtree -name '*.cpp'|xargs clang-check

              or using a specific build path:

              find  path/in/subtree   -name   '*.cpp'|xargs   clang-check   -p
              build/path

              Note,  that  path/in/subtree and current directory should follow
              the rules described above.

clang-check 14                     July 2023                    CLANG-CHECK(1)
