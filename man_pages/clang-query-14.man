CLANG-QUERY(1)                   User Commands                  CLANG-QUERY(1)

NAME
       clang-query - manual page for clang-query 14

DESCRIPTION
       USAGE: clang-query [options] <source0> [... <sourceN>]

       OPTIONS:

       Generic Options:

       --help                       - Display available options (--help-hidden
              for more)

       --help-list                  -  Display  list  of   available   options
              (--help-list-hidden for more)

       --version                   - Display the version of this program

       clang-query options:

       -c=<command>                - Specify command to run

       --extra-arg=<string>        - Additional argument to append to the com‐
              piler command line

       --extra-arg-before=<string> - Additional argument  to  prepend  to  the
              compiler command line

       -f=<file>                   - Read commands from file

       -p=<string>                 - Build path

       --preload=<file>             - Preload commands from file and start in‐
              teractive mode

       --use-color                 - Use colors in detailed AST output. If not
       set, colors
              will  be  used if the terminal connected to standard output sup‐
              ports colors.

       -p <build-path> is used to read a compile command database.

              For example, it can be a CMake build directory in which  a  file
              named   compile_commands.json  exists  (use  -DCMAKE_EXPORT_COM‐
              PILE_COMMANDS=ON CMake option to get this output). When no build
              path  is  specified,  a search for compile_commands.json will be
              attempted through all parent paths of the  first  input  file  .
              See:   https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html
              for an example of setting up Clang Tooling on a source tree.

       <source0> ... specify the paths of source files. These paths are

              looked up in the compile command database. If the path of a file
              is  absolute, it needs to point into CMake's source tree. If the
              path is relative, the current working directory needs to  be  in
              the  CMake source tree and the file must be in a subdirectory of
              the current working directory. "./"  prefixes  in  the  relative
              files  will be automatically removed, but the rest of a relative
              path must be a suffix of a path in the compile command database.

clang-query 14                     July 2023                    CLANG-QUERY(1)
